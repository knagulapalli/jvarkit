/* Generated By:JavaCC: Do not edit this line. IntervalParser.java */
package fr.inserm.umr1087.jvarkit.util.intervalparser;
import net.sf.picard.util.Interval;
/**
 * Author:
 *	Pierre Lindenbaum PhD
 * WWW
 *	http://plindenbaum.blogspot.com
 * Motivation
 *	parsing a genomic fragment (chr:start-end)
 *
 */
import java.math.BigInteger;

public class IntervalParser implements IntervalParserConstants {
        private static final BigInteger TWO=new BigInteger("2");
        private static final BigInteger INT_MAX=new BigInteger(String.valueOf(Integer.MAX_VALUE));

    public static Interval parseOne(String s) throws ParseException
            {
            IntervalParser parser = new IntervalParser(new java.io.StringReader(s));
            return parser.one();
            }

        public static java.util.List<Interval> parseMany(String s) throws ParseException
            {
            IntervalParser parser = new IntervalParser(new java.io.StringReader(s));
            return parser.many();
            }

        public static void main(String args[])
                {
                try
                        {
                        IntervalParser parser = new IntervalParser(System.in);
                        System.out.println(parser.one());
                        }
                catch(Throwable err)
                        {
                        err.printStackTrace();
                        }
                }

  final public java.util.List<Interval> many() throws ParseException {
        java.util.List<Interval> L=new java.util.ArrayList<Interval>();
        Interval  s1;
        Interval  s2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case IDENTIFIER:
      s1 = segment();
                          L.add(s1);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case IDENTIFIER:
        case DELIM:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELIM:
          jj_consume_token(DELIM);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        s2 = segment();
                                                                 L.add(s2);
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(0);
                {if (true) return L;}
    throw new Error("Missing return statement in function");
  }

  final public Interval one() throws ParseException {
                       Interval pos;
    pos = segment();
    jj_consume_token(0);
                {if (true) return pos;}
    throw new Error("Missing return statement in function");
  }

  final private Interval segment() throws ParseException {
                            String chrom;BigInteger start=null; BigInteger end=null ; char sign='?';
    chrom = chromName();
    jj_consume_token(COLON);
    start = position();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DASH:
    case PLUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DASH:
        jj_consume_token(DASH);
        end = position();
                                                                               sign='-';
        break;
      case PLUS:
        jj_consume_token(PLUS);
        end = position();
                                                                                                                  sign='+';
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                switch(sign)
                        {
                        case '?': end=start.add(BigInteger.ONE);break;
                        case '-': break;
                        case '+': start=start.subtract(end);end=BigInteger.ONE.add(start.add(end.multiply(TWO)));break;
                        }
                if(start.compareTo(BigInteger.ZERO)<0)  {if (true) throw new ParseException(start.toString()+" < 0)");}
                if(end.compareTo(start)<0)  {if (true) throw new ParseException(start.toString()+" > "+end+")");}
                if(INT_MAX.compareTo(start)<=0) {if (true) throw new ParseException(start.toString()+" > "+ INT_MAX);}
                if(INT_MAX.compareTo(end)<=0) {if (true) throw new ParseException(end.toString()+" > "+ INT_MAX);}
                {if (true) return new Interval(chrom,start.intValue(),end.intValue());}
    throw new Error("Missing return statement in function");
  }

  final private BigInteger position() throws ParseException {
                                BigInteger i=null; BigInteger mul=BigInteger.ONE;
    i = integer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BP:
    case KB:
    case MB:
    case GB:
      mul = factor();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                                      {if (true) return i.multiply(mul);}
    throw new Error("Missing return statement in function");
  }

  final private BigInteger factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BP:
      jj_consume_token(BP);
                 {if (true) return new BigInteger("1");}
      break;
    case KB:
      jj_consume_token(KB);
                 {if (true) return new BigInteger("1000");}
      break;
    case MB:
      jj_consume_token(MB);
                 {if (true) return new BigInteger("1000000");}
      break;
    case GB:
      jj_consume_token(GB);
                 {if (true) return new BigInteger("1000000000");}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private BigInteger integer() throws ParseException {
                              Token t;
    t = jj_consume_token(INT);
                  {if (true) return new BigInteger(t.image.replace(",",""));}
    throw new Error("Missing return statement in function");
  }

  final private String chromName() throws ParseException {
                            BigInteger i; String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      i = integer();
                        {if (true) return  "chr"+i.toString();}
      break;
    case IDENTIFIER:
      s = identifier();
                           {if (true) return s;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private String identifier() throws ParseException {
                             Token t;
    t = jj_consume_token(IDENTIFIER);
                         {if (true) return  t.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public IntervalParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8840,0x8000,0x840,0x6000,0x6000,0x780,0x780,0x840,};
   }

  /** Constructor with InputStream. */
  public IntervalParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public IntervalParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IntervalParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public IntervalParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IntervalParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public IntervalParser(IntervalParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(IntervalParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
